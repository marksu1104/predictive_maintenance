getwd()
#清空記憶體
rm(list=ls())
# 避免中文亂碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8")
#讀取檔案資料
data = read.csv("predictive_maintenance.csv", header=TRUE,
stringsAsFactors = TRUE, fileEncoding = 'utf-8')
data = subset(da,select=c(-UDI,-ProductID))
data = subset(data,select=c(-UDI,-ProductID))
data = subset(data,select=c(-UDI,-Product.ID))
#清空記憶體
rm(list=ls())
# 避免中文亂碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8")
#讀取檔案資料
data = read.csv("predictive_maintenance.csv", header=TRUE,
stringsAsFactors = TRUE, fileEncoding = 'utf-8')
data = subset(data,select=c(-UDI,-Product.ID))
rm(list=ls())
# 避免中文亂碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8")
#讀取檔案資料
data = read.csv("predictive_maintenance.csv", header=TRUE,
stringsAsFactors = TRUE, fileEncoding = 'utf-8')
#清空記憶體
rm(list=ls())
# 避免中文亂碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8")
#讀取檔案資料
data = read.csv("predictive_maintenance.csv", header=TRUE,
stringsAsFactors = TRUE, fileEncoding = 'utf-8')
data = subset(data,select=c(-UDI,-Product.ID))
#清空記憶體
rm(list=ls())
# 避免中文亂碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8")
#讀取檔案資料
data = read.csv("predictive_maintenance.csv", header=TRUE,
stringsAsFactors = TRUE, fileEncoding = 'utf-8')
data = subset(data,select=c(-UDI,-Product.ID))
View(data)
data$FailureType == "Heat Dissipation Failure","Failure","NotFailure"
ifelse(data$FailureType == "Heat Dissipation Failure","Failure","NotFailure"))
ifelse(data$FailureType == "Heat Dissipation Failure","Failure","NotFailure")
data = cbind(data,hdf=factor(ifelse(data$FailureType == "Heat Dissipation Failure","Failure","NotFailure")))
#清空記憶體
rm(list=ls())
#設定檔案路徑及資料編碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8") # 避免中文亂碼
#讀取檔案資料
#讀取檔案，header = TRUE表示第一筆資料為標題，stringsAsFactors = FALSE表示不自動設定分類
da=read.csv("predictive_maintenance.csv", header=TRUE, stringsAsFactors = TRUE, fileEncoding = 'utf-8')
#建立引數(就可以直接使用欄位名稱)
attach(da)
da=subset(da,select=c(-UDI,-ProductID,-Type,-Target))
#清空記憶體
rm(list=ls())
#設定檔案路徑及資料編碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8") # 避免中文亂碼
#讀取檔案資料
#讀取檔案，header = TRUE表示第一筆資料為標題，stringsAsFactors = FALSE表示不自動設定分類
da=read.csv("predictive_maintenance.csv", header=TRUE, stringsAsFactors = TRUE, fileEncoding = 'utf-8')
#建立引數(就可以直接使用欄位名稱)
attach(da)
da=subset(da,select=c(-UDI,-Product.ID,-Type,-Target))
#########################################################################
###
###            每種Failure獨立處理
###
#########################################################################
######################## 重新分類FailureType裡的值 #######################
#取出Heat Dissipation Failure
da = cbind(da,hdf=factor(ifelse(da$FailureType == "Heat Dissipation Failure","Failure","NotFailure")))
cbind(da,hdf=factor(ifelse(da$FailureType == "Heat Dissipation Failure","Failure","NotFailure")))
factor(ifelse(da$FailureType == "Heat Dissipation Failure","Failure","NotFailure"))
View(da)
#清空記憶體
rm(list=ls())
#設定檔案路徑及資料編碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8") # 避免中文亂碼
#讀取檔案資料
#讀取檔案，header = TRUE表示第一筆資料為標題，stringsAsFactors = FALSE表示不自動設定分類
da=read.csv("predictive_maintenance.csv", header=TRUE, stringsAsFactors = FALSE, fileEncoding = 'utf-8')
#建立引數(就可以直接使用欄位名稱)
attach(da)
da=subset(da,select=c(-UDI,-Product.ID,-Type,-Target))
#########################################################################
###
###            每種Failure獨立處理
###
#########################################################################
######################## 重新分類FailureType裡的值 #######################
#取出Heat Dissipation Failure
da = cbind(da,hdf=factor(ifelse(da$FailureType == "Heat Dissipation Failure","Failure","NotFailure")))
factor(ifelse(da$FailureType == "Heat Dissipation Failure","Failure","NotFailure"))
ifelse(da$FailureType == "Heat Dissipation Failure","Failure","NotFailure")
###################################################
#
# 隨機森林
#
# 從訓練集(母體N)抽樣取出n筆資料(採抽樣可放回方式)來建立決策樹
# 每棵決策樹採用隨機挑選K個特徵建立
# 重複M次建立M棵決策樹
# 分類(預測)過程中，若為線性問題採平均數，非線性問題採眾數(或稱投票機制)
#
###################################################
library(rpart) #install.packages("rpart")
library(rpart.plot) #install.packages("rpart.plot")
library("randomForest") #install.packages("randomForest")
library("performanceEstimation")
#清空暫存資料
rm(list=ls())
#設定檔案路徑及資料編碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8") # 避免中文亂碼
#讀取檔案資料
#讀取檔案，header = TRUE表示第一筆資料為標題，stringsAsFactors = FALSE表示不自動設定分類
dp=read.csv("predictive_maintenance.csv", header=TRUE, stringsAsFactors = TRUE, fileEncoding = 'utf-8')
#建立引數(就可以直接使用欄位名稱)
attach(dp)
#分割資料為訓練資料及測試資料
n=dim(dp)[1]
dp_idx=sample(1:n,size=round(0.7*n))
#訓練資料
dp_data=dp[dp_idx,]
#測試資料
test_data=dp[-dp_idx,]
#應變數欄位名稱~. 表示除了應變數欄位其餘全是自變數
#應變數欄位名稱~自變數名稱+自變數名稱...
#randomforestM=randomForest(Failure~feature+Life, data=dp_data, importance=T,
#                           proximity=T, do.trace=50,ntree=200)
#設定亂數
set.seed(123)
randomforestM=randomForest(FailureType~AirTemperature_K+ProcessTemperature_K+RotationalSpeed_rpm+Torque_Nm+ToolWear_min
, data=dp_data, importance=T, proximity=T, do.trace=100,ntree=500)
###################################################
#
# 隨機森林
#
# 從訓練集(母體N)抽樣取出n筆資料(採抽樣可放回方式)來建立決策樹
# 每棵決策樹採用隨機挑選K個特徵建立
# 重複M次建立M棵決策樹
# 分類(預測)過程中，若為線性問題採平均數，非線性問題採眾數(或稱投票機制)
#
###################################################
library(rpart) #install.packages("rpart")
library(rpart.plot) #install.packages("rpart.plot")
library("randomForest") #install.packages("randomForest")
library("performanceEstimation")
#清空暫存資料
rm(list=ls())
#設定檔案路徑及資料編碼
setwd("C:/R語言/隨機森林")
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8") # 避免中文亂碼
###################################################
#
# 隨機森林
#
# 從訓練集(母體N)抽樣取出n筆資料(採抽樣可放回方式)來建立決策樹
# 每棵決策樹採用隨機挑選K個特徵建立
# 重複M次建立M棵決策樹
# 分類(預測)過程中，若為線性問題採平均數，非線性問題採眾數(或稱投票機制)
#
###################################################
library(rpart) #install.packages("rpart")
library(rpart.plot) #install.packages("rpart.plot")
library("randomForest") #install.packages("randomForest")
library("performanceEstimation")
#清空暫存資料
rm(list=ls())
#設定檔案路徑及資料編碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8") # 避免中文亂碼
#讀取檔案資料
#讀取檔案，header = TRUE表示第一筆資料為標題，stringsAsFactors = FALSE表示不自動設定分類
dp=read.csv("predictive_maintenance.csv", header=TRUE, stringsAsFactors = TRUE, fileEncoding = 'utf-8')
#建立引數(就可以直接使用欄位名稱)
attach(dp)
#分割資料為訓練資料及測試資料
n=dim(dp)[1]
dp_idx=sample(1:n,size=round(0.7*n))
#訓練資料
dp_data=dp[dp_idx,]
#測試資料
test_data=dp[-dp_idx,]
#應變數欄位名稱~. 表示除了應變數欄位其餘全是自變數
#應變數欄位名稱~自變數名稱+自變數名稱...
#randomforestM=randomForest(Failure~feature+Life, data=dp_data, importance=T,
#                           proximity=T, do.trace=50,ntree=200)
#設定亂數
set.seed(123)
randomforestM=randomForest(FailureType~AirTemperature_K+ProcessTemperature_K+RotationalSpeed_rpm+Torque_Nm+ToolWear_min
, data=dp_data, importance=T, proximity=T, do.trace=100,ntree=500)
#清空記憶體
rm(list=ls())
#設定檔案路徑及資料編碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8") # 避免中文亂碼
#讀取檔案資料
#讀取檔案，header = TRUE表示第一筆資料為標題，stringsAsFactors = FALSE表示不自動設定分類
da=read.csv("predictive_maintenance.csv", header=TRUE, stringsAsFactors = FALSE, fileEncoding = 'utf-8')
#建立引數(就可以直接使用欄位名稱)
attach(da)
da=subset(da,select=c(-UDI,-Product.ID,-Type,-Target))
#########################################################################
###
###            每種Failure獨立處理
###
#########################################################################
######################## 重新分類FailureType裡的值 #######################
#取出Heat Dissipation Failure
da = cbind(da,hdf=factor(ifelse(da$FailureType == "Heat Dissipation Failure","Failure","NotFailure")))
#取出Heat Dissipation Failure
da = cbind(da,hdf=factor(ifelse(da$Failure.Type == "Heat Dissipation Failure","Failure","NotFailure")))
#取出Overstrain Failure
da = cbind(da,of=factor(ifelse(da$Failure.Type == "Overstrain Failure","Failure","NotFailure")))
#取出Power Failure
da = cbind(da,pf=factor(ifelse(da$Failure.Type == "Power Failure","Failure","NotFailure")))
#取出Random Failures
da = cbind(da,rf=factor(ifelse(da$Failure.Type == "Random Failures","Failure","NotFailure")))
#取出Tool Wear Failure
da = cbind(da,twf=factor(ifelse(da$Failure.Type == "Tool Wear Failure","Failure","NotFailure")))
View(da)
n=dim(da)[1]
da_idx=sample(1:n,size=round(0.7*n))
da_data=da[da_idx,]
test_data=da[-da_idx,]
library(class)
dp_x = cbind(da_data[,1],da_data[,2],da_data[,3],da_data[,4],da_data[,5])
dp_y = da_data$hdf
test_x = cbind(test_data[,1],test_data[,2],test_data[,3],test_data[,4],test_data[,5])
test_y = test_data$hdf
View(test_data)
View(dp_x)
kv = round(sqrt(n))
kv
model = knn(train = dp_x, test = test_x, cl = dp_y, k = kv)
cm = table(x = test_y, y = model, dnn = c("實際", "預測"))
cm
knnaccuracy = sum(diag(cm)) / sum(cm)
knnaccuracy
library("performanceEstimation")
table(da$hdf)
newData = smote(hdf ~ ., da, perc.over = 30,perc.under=3)
View(da)
#取出Heat Dissipation Failure
data = cbind(data,hdf=factor(ifelse(data$Failure.Type == "Heat Dissipation Failure",1,0)))
#清空記憶體
rm(list=ls())
# 避免中文亂碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8")
#讀取檔案資料
data = read.csv("predictive_maintenance.csv", header=TRUE,
stringsAsFactors = TRUE, fileEncoding = 'utf-8')
data = subset(data,select=c(-UDI,-Product.ID))
#取出Heat Dissipation Failure
data = cbind(data,hdf=factor(ifelse(data$Failure.Type == "Heat Dissipation Failure",1,0)))
#取出Overstrain Failure
data = cbind(data,of=factor(ifelse(data$Failure.Type == "Overstrain Failure",1,0)))
#取出Power Failure
data = cbind(data,pf=factor(ifelse(data$Failure.Type == "Power Failure",1,0)))
#取出Random Failures
data = cbind(data,rf=factor(ifelse(data$Failure.Type == "Random Failures",1,0)))
#取出Tool Wear Failure
data = cbind(data,twf=factor(ifelse(data$Failure.Type == "Tool Wear Failure",1,0)))
View(data)
#清空記憶體
rm(list=ls())
#設定檔案路徑及資料編碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8") # 避免中文亂碼
#讀取檔案資料
#讀取檔案，header = TRUE表示第一筆資料為標題，stringsAsFactors = FALSE表示不自動設定分類
da=read.csv("predictive_maintenance.csv", header=TRUE, stringsAsFactors = FALSE, fileEncoding = 'utf-8')
#建立引數(就可以直接使用欄位名稱)
attach(da)
da=subset(da,select=c(-UDI,-Product.ID,-Type,-Target))
#########################################################################
###
###            每種Failure獨立處理
###
#########################################################################
######################## 重新分類FailureType裡的值 #######################
#取出Heat Dissipation Failure
da = cbind(da,hdf=factor(ifelse(da$Failure.Type == "Heat Dissipation Failure","Failure","NotFailure")))
#取出Overstrain Failure
da = cbind(da,of=factor(ifelse(da$Failure.Type == "Overstrain Failure","Failure","NotFailure")))
#取出Power Failure
da = cbind(da,pf=factor(ifelse(da$Failure.Type == "Power Failure","Failure","NotFailure")))
#取出Random Failures
da = cbind(da,rf=factor(ifelse(da$Failure.Type == "Random Failures","Failure","NotFailure")))
#取出Tool Wear Failure
da = cbind(da,twf=factor(ifelse(da$Failure.Type == "Tool Wear Failure","Failure","NotFailure")))
#取得總比數，並隨機成學習集及測試集
n=dim(da)[1]
da_idx=sample(1:n,size=round(0.7*n))
da_data=da[da_idx,]
test_data=da[-da_idx,]
########################################################################################
#
#   KNN (K最近鄰居分類法)
#   使用點間的距離為分類標準，當新的觀測值準備預測時，演算法會計算出和它接近最多的類目標點
#
#   train： 訓練集(應變數)
#   test：  測試集(應變數)
#   cl：    真實分類(自變數)
#   k：     參考鄰居數量
#
########################################################################################
library(class)
################## 分割自變數和應變數 #################
dp_x = cbind(da_data[,1],da_data[,2],da_data[,3],da_data[,4],da_data[,5])
dp_y = da_data$hdf
test_x = cbind(test_data[,1],test_data[,2],test_data[,3],test_data[,4],test_data[,5])
test_y = test_data$hdf
#計算k值(幾個鄰居)通常可以用資料數的平方根
kv = round(sqrt(n))
kv
model = knn(train = dp_x, test = test_x, cl = dp_y, k = kv)
cm = table(x = test_y, y = model, dnn = c("實際", "預測"))
cm
knnaccuracy = sum(diag(cm)) / sum(cm)
knnaccuracy
#########################進行資料不平衡處理########################
library("performanceEstimation")
table(da$hdf)
newData = smote(hdf ~ ., da, perc.over = 30,perc.under=3)
#清空記憶體
rm(list=ls())
#設定檔案路徑及資料編碼
Sys.setlocale(category = "LC_ALL", locale = "zh_TW.UTF-8") # 避免中文亂碼
#讀取檔案資料
#讀取檔案，header = TRUE表示第一筆資料為標題，stringsAsFactors = FALSE表示不自動設定分類
da=read.csv("predictive_maintenance.csv", header=TRUE, stringsAsFactors = FALSE, fileEncoding = 'utf-8')
#建立引數(就可以直接使用欄位名稱)
attach(da)
da=subset(da,select=c(-UDI,-Product.ID,-Type,-Target))
#########################################################################
###
###            每種Failure獨立處理
###
#########################################################################
######################## 重新分類FailureType裡的值 #######################
#取出Heat Dissipation Failure
da = cbind(da,hdf=factor(ifelse(da$Failure.Type == "Heat Dissipation Failure","Failure","NotFailure")))
#取出Overstrain Failure
da = cbind(da,of=factor(ifelse(da$Failure.Type == "Overstrain Failure","Failure","NotFailure")))
#取出Power Failure
da = cbind(da,pf=factor(ifelse(da$Failure.Type == "Power Failure","Failure","NotFailure")))
#取出Random Failures
da = cbind(da,rf=factor(ifelse(da$Failure.Type == "Random Failures","Failure","NotFailure")))
#取出Tool Wear Failure
da = cbind(da,twf=factor(ifelse(da$Failure.Type == "Tool Wear Failure","Failure","NotFailure")))
#取得總比數，並隨機成學習集及測試集
n=dim(da)[1]
da_idx=sample(1:n,size=round(0.7*n))
da_data=da[da_idx,]
test_data=da[-da_idx,]
########################################################################################
#
#   KNN (K最近鄰居分類法)
#   使用點間的距離為分類標準，當新的觀測值準備預測時，演算法會計算出和它接近最多的類目標點
#
#   train： 訓練集(應變數)
#   test：  測試集(應變數)
#   cl：    真實分類(自變數)
#   k：     參考鄰居數量
#
########################################################################################
library(class)
################## 分割自變數和應變數 #################
dp_x = cbind(da_data[,1],da_data[,2],da_data[,3],da_data[,4],da_data[,5])
dp_y = da_data$hdf
test_x = cbind(test_data[,1],test_data[,2],test_data[,3],test_data[,4],test_data[,5])
test_y = test_data$hdf
#計算k值(幾個鄰居)通常可以用資料數的平方根
kv = round(sqrt(n))
kv
model = knn(train = dp_x, test = test_x, cl = dp_y, k = kv)
cm = table(x = test_y, y = model, dnn = c("實際", "預測"))
cm
knnaccuracy = sum(diag(cm)) / sum(cm)
knnaccuracy
table(da$hdf)
newData = smote(hdf ~ ., da, perc.over = 30,perc.under=3)
